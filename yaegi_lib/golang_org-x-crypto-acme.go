// Code generated by 'yaegi extract golang.org/x/crypto/acme'. DO NOT EDIT.

//go:build yaegi_lib
// +build yaegi_lib

package yaegi_lib

import (
	"go/constant"
	"go/token"
	"golang.org/x/crypto/acme"
	"reflect"
)

func init() {
	Symbols["golang.org/x/crypto/acme/acme"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ALPNProto":                     reflect.ValueOf(constant.MakeFromLiteral("\"acme-tls/1\"", token.STRING, 0)),
		"AcceptTOS":                     reflect.ValueOf(acme.AcceptTOS),
		"CRLReasonAACompromise":         reflect.ValueOf(acme.CRLReasonAACompromise),
		"CRLReasonAffiliationChanged":   reflect.ValueOf(acme.CRLReasonAffiliationChanged),
		"CRLReasonCACompromise":         reflect.ValueOf(acme.CRLReasonCACompromise),
		"CRLReasonCertificateHold":      reflect.ValueOf(acme.CRLReasonCertificateHold),
		"CRLReasonCessationOfOperation": reflect.ValueOf(acme.CRLReasonCessationOfOperation),
		"CRLReasonKeyCompromise":        reflect.ValueOf(acme.CRLReasonKeyCompromise),
		"CRLReasonPrivilegeWithdrawn":   reflect.ValueOf(acme.CRLReasonPrivilegeWithdrawn),
		"CRLReasonRemoveFromCRL":        reflect.ValueOf(acme.CRLReasonRemoveFromCRL),
		"CRLReasonSuperseded":           reflect.ValueOf(acme.CRLReasonSuperseded),
		"CRLReasonUnspecified":          reflect.ValueOf(acme.CRLReasonUnspecified),
		"DomainIDs":                     reflect.ValueOf(acme.DomainIDs),
		"ErrAccountAlreadyExists":       reflect.ValueOf(&acme.ErrAccountAlreadyExists).Elem(),
		"ErrNoAccount":                  reflect.ValueOf(&acme.ErrNoAccount).Elem(),
		"ErrUnsupportedKey":             reflect.ValueOf(&acme.ErrUnsupportedKey).Elem(),
		"IPIDs":                         reflect.ValueOf(acme.IPIDs),
		"JWKThumbprint":                 reflect.ValueOf(acme.JWKThumbprint),
		"LetsEncryptURL":                reflect.ValueOf(constant.MakeFromLiteral("\"https://acme-v02.api.letsencrypt.org/directory\"", token.STRING, 0)),
		"RateLimit":                     reflect.ValueOf(acme.RateLimit),
		"StatusDeactivated":             reflect.ValueOf(constant.MakeFromLiteral("\"deactivated\"", token.STRING, 0)),
		"StatusExpired":                 reflect.ValueOf(constant.MakeFromLiteral("\"expired\"", token.STRING, 0)),
		"StatusInvalid":                 reflect.ValueOf(constant.MakeFromLiteral("\"invalid\"", token.STRING, 0)),
		"StatusPending":                 reflect.ValueOf(constant.MakeFromLiteral("\"pending\"", token.STRING, 0)),
		"StatusProcessing":              reflect.ValueOf(constant.MakeFromLiteral("\"processing\"", token.STRING, 0)),
		"StatusReady":                   reflect.ValueOf(constant.MakeFromLiteral("\"ready\"", token.STRING, 0)),
		"StatusRevoked":                 reflect.ValueOf(constant.MakeFromLiteral("\"revoked\"", token.STRING, 0)),
		"StatusUnknown":                 reflect.ValueOf(constant.MakeFromLiteral("\"unknown\"", token.STRING, 0)),
		"StatusValid":                   reflect.ValueOf(constant.MakeFromLiteral("\"valid\"", token.STRING, 0)),
		"WithKey":                       reflect.ValueOf(acme.WithKey),
		"WithOrderNotAfter":             reflect.ValueOf(acme.WithOrderNotAfter),
		"WithOrderNotBefore":            reflect.ValueOf(acme.WithOrderNotBefore),
		"WithTemplate":                  reflect.ValueOf(acme.WithTemplate),

		// type definitions
		"Account":                reflect.ValueOf((*acme.Account)(nil)),
		"Authorization":          reflect.ValueOf((*acme.Authorization)(nil)),
		"AuthorizationError":     reflect.ValueOf((*acme.AuthorizationError)(nil)),
		"AuthzID":                reflect.ValueOf((*acme.AuthzID)(nil)),
		"CRLReasonCode":          reflect.ValueOf((*acme.CRLReasonCode)(nil)),
		"CertOption":             reflect.ValueOf((*acme.CertOption)(nil)),
		"Challenge":              reflect.ValueOf((*acme.Challenge)(nil)),
		"Client":                 reflect.ValueOf((*acme.Client)(nil)),
		"Directory":              reflect.ValueOf((*acme.Directory)(nil)),
		"Error":                  reflect.ValueOf((*acme.Error)(nil)),
		"ExternalAccountBinding": reflect.ValueOf((*acme.ExternalAccountBinding)(nil)),
		"KeyID":                  reflect.ValueOf((*acme.KeyID)(nil)),
		"Order":                  reflect.ValueOf((*acme.Order)(nil)),
		"OrderError":             reflect.ValueOf((*acme.OrderError)(nil)),
		"OrderOption":            reflect.ValueOf((*acme.OrderOption)(nil)),
		"Subproblem":             reflect.ValueOf((*acme.Subproblem)(nil)),

		// interface wrapper definitions
		"_CertOption":  reflect.ValueOf((*_golang_org_x_crypto_acme_CertOption)(nil)),
		"_OrderOption": reflect.ValueOf((*_golang_org_x_crypto_acme_OrderOption)(nil)),
	}
}

// _golang_org_x_crypto_acme_CertOption is an interface wrapper for CertOption type
type _golang_org_x_crypto_acme_CertOption struct {
	IValue interface{}
}

// _golang_org_x_crypto_acme_OrderOption is an interface wrapper for OrderOption type
type _golang_org_x_crypto_acme_OrderOption struct {
	IValue interface{}
}
