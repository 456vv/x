// Code generated by 'yaegi extract github.com/goplus/reflectx'. DO NOT EDIT.

package yaegi_lib

import (
	"github.com/goplus/reflectx"
	"reflect"
	"unsafe"
)

func init() {
	Symbols["github.com/goplus/reflectx/reflectx"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddMethodProvider":            reflect.ValueOf(reflectx.AddMethodProvider),
		"BothDir":                      reflect.ValueOf(reflectx.BothDir),
		"CanSet":                       reflect.ValueOf(reflectx.CanSet),
		"DumpType":                     reflect.ValueOf(reflectx.DumpType),
		"EnableExportAllMethod":        reflect.ValueOf(&reflectx.EnableExportAllMethod).Elem(),
		"EnableStructOfExportAllField": reflect.ValueOf(&reflectx.EnableStructOfExportAllField).Elem(),
		"Field":                        reflect.ValueOf(reflectx.Field),
		"FieldByIndex":                 reflect.ValueOf(reflectx.FieldByIndex),
		"FieldByIndexX":                reflect.ValueOf(reflectx.FieldByIndexX),
		"FieldByName":                  reflect.ValueOf(reflectx.FieldByName),
		"FieldByNameFunc":              reflect.ValueOf(reflectx.FieldByNameFunc),
		"FieldByNameFuncX":             reflect.ValueOf(reflectx.FieldByNameFuncX),
		"FieldByNameX":                 reflect.ValueOf(reflectx.FieldByNameX),
		"FieldX":                       reflect.ValueOf(reflectx.FieldX),
		"InterfaceOf":                  reflect.ValueOf(reflectx.InterfaceOf),
		"IsNamed":                      reflect.ValueOf(reflectx.IsNamed),
		"MakeEmptyInterface":           reflect.ValueOf(reflectx.MakeEmptyInterface),
		"MakeMethod":                   reflect.ValueOf(reflectx.MakeMethod),
		"MethodByIndex":                reflect.ValueOf(reflectx.MethodByIndex),
		"MethodByName":                 reflect.ValueOf(reflectx.MethodByName),
		"MethodX":                      reflect.ValueOf(reflectx.MethodX),
		"NamedInterfaceOf":             reflect.ValueOf(reflectx.NamedInterfaceOf),
		"NamedStructOf":                reflect.ValueOf(reflectx.NamedStructOf),
		"NamedTypeOf":                  reflect.ValueOf(reflectx.NamedTypeOf),
		"NewInterfaceType":             reflect.ValueOf(reflectx.NewInterfaceType),
		"NewMethodSet":                 reflect.ValueOf(reflectx.NewMethodSet),
		"NumMethodX":                   reflect.ValueOf(reflectx.NumMethodX),
		"RecvDir":                      reflect.ValueOf(reflectx.RecvDir),
		"ReplaceType":                  reflect.ValueOf(reflectx.ReplaceType),
		"Reset":                        reflect.ValueOf(reflectx.Reset),
		"SendDir":                      reflect.ValueOf(reflectx.SendDir),
		"SetElem":                      reflect.ValueOf(reflectx.SetElem),
		"SetInterfaceType":             reflect.ValueOf(reflectx.SetInterfaceType),
		"SetMethodSet":                 reflect.ValueOf(reflectx.SetMethodSet),
		"SetUnderlying":                reflect.ValueOf(reflectx.SetUnderlying),
		"SetValue":                     reflect.ValueOf(reflectx.SetValue),
		"StructOf":                     reflect.ValueOf(reflectx.StructOf),
		"StructToMethodSet":            reflect.ValueOf(reflectx.StructToMethodSet),
		"TkInvalid":                    reflect.ValueOf(reflectx.TkInvalid),
		"TkMethod":                     reflect.ValueOf(reflectx.TkMethod),
		"TkType":                       reflect.ValueOf(reflectx.TkType),
		"ToNamed":                      reflect.ValueOf(reflectx.ToNamed),
		"TypeLinks":                    reflect.ValueOf(reflectx.TypeLinks),
		"TypesByString":                reflect.ValueOf(reflectx.TypesByString),
		"UpdateField":                  reflect.ValueOf(reflectx.UpdateField),

		// type definitions
		"ChanDir":        reflect.ValueOf((*reflectx.ChanDir)(nil)),
		"Method":         reflect.ValueOf((*reflectx.Method)(nil)),
		"MethodInfo":     reflect.ValueOf((*reflectx.MethodInfo)(nil)),
		"MethodProvider": reflect.ValueOf((*reflectx.MethodProvider)(nil)),
		"Named":          reflect.ValueOf((*reflectx.Named)(nil)),
		"TypeKind":       reflect.ValueOf((*reflectx.TypeKind)(nil)),
		"Value":          reflect.ValueOf((*reflectx.Value)(nil)),

		// interface wrapper definitions
		"_MethodProvider": reflect.ValueOf((*_github_com_goplus_reflectx_MethodProvider)(nil)),
	}
}

// _github_com_goplus_reflectx_MethodProvider is an interface wrapper for MethodProvider type
type _github_com_goplus_reflectx_MethodProvider struct {
	IValue interface{}
	WCap   func() int
	WClear func()
	WLen   func() int
	WPush  func(info *reflectx.MethodInfo) (ifn unsafe.Pointer)
}

func (W _github_com_goplus_reflectx_MethodProvider) Cap() int {
	return W.WCap()
}
func (W _github_com_goplus_reflectx_MethodProvider) Clear() {
	W.WClear()
}
func (W _github_com_goplus_reflectx_MethodProvider) Len() int {
	return W.WLen()
}
func (W _github_com_goplus_reflectx_MethodProvider) Push(info *reflectx.MethodInfo) (ifn unsafe.Pointer) {
	return W.WPush(info)
}
