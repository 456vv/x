// Code generated by 'yaegi extract github.com/bep/golibsass/libsass'. DO NOT EDIT.

//go:build yaegi_lib && libsass
// +build yaegi_lib,libsass

package yaegi_lib

import (
	"github.com/bep/golibsass/libsass"
	"reflect"
)

func init() {
	Symbols["github.com/bep/golibsass/libsass/libsass"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CompactStyle":     reflect.ValueOf(libsass.CompactStyle),
		"CompressedStyle":  reflect.ValueOf(libsass.CompressedStyle),
		"ExpandedStyle":    reflect.ValueOf(libsass.ExpandedStyle),
		"NestedStyle":      reflect.ValueOf(libsass.NestedStyle),
		"New":              reflect.ValueOf(libsass.New),
		"ParseOutputStyle": reflect.ValueOf(libsass.ParseOutputStyle),

		// type definitions
		"Options":          reflect.ValueOf((*libsass.Options)(nil)),
		"OutputStyle":      reflect.ValueOf((*libsass.OutputStyle)(nil)),
		"Result":           reflect.ValueOf((*libsass.Result)(nil)),
		"SourceMapOptions": reflect.ValueOf((*libsass.SourceMapOptions)(nil)),
		"Transpiler":       reflect.ValueOf((*libsass.Transpiler)(nil)),

		// interface wrapper definitions
		"_Transpiler": reflect.ValueOf((*_github_com_bep_golibsass_libsass_Transpiler)(nil)),
	}
}

// _github_com_bep_golibsass_libsass_Transpiler is an interface wrapper for Transpiler type
type _github_com_bep_golibsass_libsass_Transpiler struct {
	IValue   interface{}
	WExecute func(src string) (libsass.Result, error)
}

func (W _github_com_bep_golibsass_libsass_Transpiler) Execute(src string) (libsass.Result, error) {
	return W.WExecute(src)
}
