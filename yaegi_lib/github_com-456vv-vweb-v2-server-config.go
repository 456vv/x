// Code generated by 'yaegi extract github.com/456vv/vweb/v2/server/config'. DO NOT EDIT.

//go:build yaegi_lib
// +build yaegi_lib

package yaegi_lib

import (
	"github.com/456vv/vweb/v2"
	"github.com/456vv/vweb/v2/server/config"
	"reflect"
)

func init() {
	Symbols["github.com/456vv/vweb/v2/server/config/config"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ConfigDataParse":           reflect.ValueOf(config.ConfigDataParse),
		"ConfigFileParse":           reflect.ValueOf(config.ConfigFileParse),
		"ConfigSiteLogLevelDisable": reflect.ValueOf(config.ConfigSiteLogLevelDisable),

		// type definitions
		"Config":               reflect.ValueOf((*config.Config)(nil)),
		"ConfigConn":           reflect.ValueOf((*config.ConfigConn)(nil)),
		"ConfigListen":         reflect.ValueOf((*config.ConfigListen)(nil)),
		"ConfigServer":         reflect.ValueOf((*config.ConfigServer)(nil)),
		"ConfigServerPublic":   reflect.ValueOf((*config.ConfigServerPublic)(nil)),
		"ConfigServerTLS":      reflect.ValueOf((*config.ConfigServerTLS)(nil)),
		"ConfigServerTLSFile":  reflect.ValueOf((*config.ConfigServerTLSFile)(nil)),
		"ConfigServers":        reflect.ValueOf((*config.ConfigServers)(nil)),
		"ConfigSite":           reflect.ValueOf((*config.ConfigSite)(nil)),
		"ConfigSiteDirectory":  reflect.ValueOf((*config.ConfigSiteDirectory)(nil)),
		"ConfigSiteDynamic":    reflect.ValueOf((*config.ConfigSiteDynamic)(nil)),
		"ConfigSiteForward":    reflect.ValueOf((*config.ConfigSiteForward)(nil)),
		"ConfigSiteForwards":   reflect.ValueOf((*config.ConfigSiteForwards)(nil)),
		"ConfigSiteHeader":     reflect.ValueOf((*config.ConfigSiteHeader)(nil)),
		"ConfigSiteHeaderType": reflect.ValueOf((*config.ConfigSiteHeaderType)(nil)),
		"ConfigSiteLog":        reflect.ValueOf((*config.ConfigSiteLog)(nil)),
		"ConfigSiteLogLevel":   reflect.ValueOf((*config.ConfigSiteLogLevel)(nil)),
		"ConfigSitePlugin":     reflect.ValueOf((*config.ConfigSitePlugin)(nil)),
		"ConfigSitePluginTLS":  reflect.ValueOf((*config.ConfigSitePluginTLS)(nil)),
		"ConfigSitePlugins":    reflect.ValueOf((*config.ConfigSitePlugins)(nil)),
		"ConfigSiteProperty":   reflect.ValueOf((*config.ConfigSiteProperty)(nil)),
		"ConfigSitePublic":     reflect.ValueOf((*config.ConfigSitePublic)(nil)),
		"ConfigSiteSession":    reflect.ValueOf((*config.ConfigSiteSession)(nil)),
		"ConfigSites":          reflect.ValueOf((*config.ConfigSites)(nil)),
		"Pluginer":             reflect.ValueOf((*config.Pluginer)(nil)),

		// interface wrapper definitions
		"_Pluginer": reflect.ValueOf((*_github_com_456vv_vweb_v2_server_config_Pluginer)(nil)),
	}
}

// _github_com_456vv_vweb_v2_server_config_Pluginer is an interface wrapper for Pluginer type
type _github_com_456vv_vweb_v2_server_config_Pluginer struct {
	IValue interface{}
	WHTTP  func(name string) (vweb.PluginHTTP, error)
	WRPC   func(name string) (vweb.PluginRPC, error)
}

func (W _github_com_456vv_vweb_v2_server_config_Pluginer) HTTP(name string) (vweb.PluginHTTP, error) {
	return W.WHTTP(name)
}
func (W _github_com_456vv_vweb_v2_server_config_Pluginer) RPC(name string) (vweb.PluginRPC, error) {
	return W.WRPC(name)
}
