// export by github.com/goplus/gossa/cmd/qexp

//go:build gossa_lib
// +build gossa_lib

package sqlite3

import (
	q "github.com/mattn/go-sqlite3"

	"go/constant"
	"reflect"

	"github.com/goplus/gossa"
)

func init() {
	gossa.RegisterPackage(&gossa.Package{
		Name: "sqlite3",
		Path: "github.com/mattn/go-sqlite3",
		Deps: map[string]string{
			"context":             "context",
			"crypto/sha1":         "sha1",
			"crypto/sha256":       "sha256",
			"crypto/sha512":       "sha512",
			"database/sql":        "sql",
			"database/sql/driver": "driver",
			"errors":              "errors",
			"fmt":                 "fmt",
			"io":                  "io",
			"math":                "math",
			"net/url":             "url",
			"reflect":             "reflect",
			"runtime":             "runtime",
			"runtime/cgo":         "cgo",
			"strconv":             "strconv",
			"strings":             "strings",
			"sync":                "sync",
			"syscall":             "syscall",
			"time":                "time",
			"unsafe":              "unsafe",
		},
		Interfaces: map[string]reflect.Type{},
		NamedTypes: map[string]gossa.NamedType{
			"ErrNo":               {reflect.TypeOf((*q.ErrNo)(nil)).Elem(), "Error,Extend", ""},
			"ErrNoExtended":       {reflect.TypeOf((*q.ErrNoExtended)(nil)).Elem(), "Error", ""},
			"Error":               {reflect.TypeOf((*q.Error)(nil)).Elem(), "Error", ""},
			"SQLiteBackup":        {reflect.TypeOf((*q.SQLiteBackup)(nil)).Elem(), "", "Close,Finish,PageCount,Remaining,Step"},
			"SQLiteConn":          {reflect.TypeOf((*q.SQLiteConn)(nil)).Elem(), "", "AuthEnabled,AuthUserAdd,AuthUserChange,AuthUserDelete,Authenticate,AutoCommit,Backup,Begin,BeginTx,Close,Exec,ExecContext,GetFilename,GetLimit,LoadExtension,Ping,Prepare,PrepareContext,Query,QueryContext,RegisterAggregator,RegisterAuthorizer,RegisterCollation,RegisterCommitHook,RegisterFunc,RegisterPreUpdateHook,RegisterRollbackHook,RegisterUpdateHook,SetFileControlInt,SetLimit,authEnabled,authUserAdd,authUserChange,authUserDelete,authenticate,begin,dbConnOpen,exec,lastError,loadExtension,loadExtensions,prepare,query"},
			"SQLiteContext":       {reflect.TypeOf((*q.SQLiteContext)(nil)).Elem(), "", "ResultBlob,ResultBool,ResultDouble,ResultInt,ResultInt64,ResultNull,ResultText,ResultZeroblob"},
			"SQLiteDriver":        {reflect.TypeOf((*q.SQLiteDriver)(nil)).Elem(), "", "Open"},
			"SQLitePreUpdateData": {reflect.TypeOf((*q.SQLitePreUpdateData)(nil)).Elem(), "", ""},
			"SQLiteResult":        {reflect.TypeOf((*q.SQLiteResult)(nil)).Elem(), "", "LastInsertId,RowsAffected"},
			"SQLiteRows":          {reflect.TypeOf((*q.SQLiteRows)(nil)).Elem(), "", "Close,ColumnTypeDatabaseTypeName,ColumnTypeNullable,ColumnTypeScanType,Columns,DeclTypes,Next,declTypes,nextSyncLocked"},
			"SQLiteStmt":          {reflect.TypeOf((*q.SQLiteStmt)(nil)).Elem(), "", "Close,Exec,ExecContext,NumInput,Query,QueryContext,Readonly,bind,exec,execSync,query"},
			"SQLiteTx":            {reflect.TypeOf((*q.SQLiteTx)(nil)).Elem(), "", "Commit,Rollback"},
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"ErrAbort":                  reflect.ValueOf(&q.ErrAbort),
			"ErrAbortRollback":          reflect.ValueOf(&q.ErrAbortRollback),
			"ErrAuth":                   reflect.ValueOf(&q.ErrAuth),
			"ErrBusy":                   reflect.ValueOf(&q.ErrBusy),
			"ErrBusyRecovery":           reflect.ValueOf(&q.ErrBusyRecovery),
			"ErrBusySnapshot":           reflect.ValueOf(&q.ErrBusySnapshot),
			"ErrCantOpen":               reflect.ValueOf(&q.ErrCantOpen),
			"ErrCantOpenConvPath":       reflect.ValueOf(&q.ErrCantOpenConvPath),
			"ErrCantOpenFullPath":       reflect.ValueOf(&q.ErrCantOpenFullPath),
			"ErrCantOpenIsDir":          reflect.ValueOf(&q.ErrCantOpenIsDir),
			"ErrCantOpenNoTempDir":      reflect.ValueOf(&q.ErrCantOpenNoTempDir),
			"ErrConstraint":             reflect.ValueOf(&q.ErrConstraint),
			"ErrConstraintCheck":        reflect.ValueOf(&q.ErrConstraintCheck),
			"ErrConstraintCommitHook":   reflect.ValueOf(&q.ErrConstraintCommitHook),
			"ErrConstraintForeignKey":   reflect.ValueOf(&q.ErrConstraintForeignKey),
			"ErrConstraintFunction":     reflect.ValueOf(&q.ErrConstraintFunction),
			"ErrConstraintNotNull":      reflect.ValueOf(&q.ErrConstraintNotNull),
			"ErrConstraintPrimaryKey":   reflect.ValueOf(&q.ErrConstraintPrimaryKey),
			"ErrConstraintRowID":        reflect.ValueOf(&q.ErrConstraintRowID),
			"ErrConstraintTrigger":      reflect.ValueOf(&q.ErrConstraintTrigger),
			"ErrConstraintUnique":       reflect.ValueOf(&q.ErrConstraintUnique),
			"ErrConstraintVTab":         reflect.ValueOf(&q.ErrConstraintVTab),
			"ErrCorrupt":                reflect.ValueOf(&q.ErrCorrupt),
			"ErrCorruptVTab":            reflect.ValueOf(&q.ErrCorruptVTab),
			"ErrEmpty":                  reflect.ValueOf(&q.ErrEmpty),
			"ErrError":                  reflect.ValueOf(&q.ErrError),
			"ErrFormat":                 reflect.ValueOf(&q.ErrFormat),
			"ErrFull":                   reflect.ValueOf(&q.ErrFull),
			"ErrInternal":               reflect.ValueOf(&q.ErrInternal),
			"ErrInterrupt":              reflect.ValueOf(&q.ErrInterrupt),
			"ErrIoErr":                  reflect.ValueOf(&q.ErrIoErr),
			"ErrIoErrAccess":            reflect.ValueOf(&q.ErrIoErrAccess),
			"ErrIoErrBlocked":           reflect.ValueOf(&q.ErrIoErrBlocked),
			"ErrIoErrCheckReservedLock": reflect.ValueOf(&q.ErrIoErrCheckReservedLock),
			"ErrIoErrClose":             reflect.ValueOf(&q.ErrIoErrClose),
			"ErrIoErrConvPath":          reflect.ValueOf(&q.ErrIoErrConvPath),
			"ErrIoErrDelete":            reflect.ValueOf(&q.ErrIoErrDelete),
			"ErrIoErrDeleteNoent":       reflect.ValueOf(&q.ErrIoErrDeleteNoent),
			"ErrIoErrDirClose":          reflect.ValueOf(&q.ErrIoErrDirClose),
			"ErrIoErrDirFsync":          reflect.ValueOf(&q.ErrIoErrDirFsync),
			"ErrIoErrFstat":             reflect.ValueOf(&q.ErrIoErrFstat),
			"ErrIoErrFsync":             reflect.ValueOf(&q.ErrIoErrFsync),
			"ErrIoErrGetTempPath":       reflect.ValueOf(&q.ErrIoErrGetTempPath),
			"ErrIoErrLock":              reflect.ValueOf(&q.ErrIoErrLock),
			"ErrIoErrMMap":              reflect.ValueOf(&q.ErrIoErrMMap),
			"ErrIoErrNoMem":             reflect.ValueOf(&q.ErrIoErrNoMem),
			"ErrIoErrRDlock":            reflect.ValueOf(&q.ErrIoErrRDlock),
			"ErrIoErrRead":              reflect.ValueOf(&q.ErrIoErrRead),
			"ErrIoErrSHMLock":           reflect.ValueOf(&q.ErrIoErrSHMLock),
			"ErrIoErrSHMMap":            reflect.ValueOf(&q.ErrIoErrSHMMap),
			"ErrIoErrSHMOpen":           reflect.ValueOf(&q.ErrIoErrSHMOpen),
			"ErrIoErrSHMSize":           reflect.ValueOf(&q.ErrIoErrSHMSize),
			"ErrIoErrSeek":              reflect.ValueOf(&q.ErrIoErrSeek),
			"ErrIoErrShortRead":         reflect.ValueOf(&q.ErrIoErrShortRead),
			"ErrIoErrTruncate":          reflect.ValueOf(&q.ErrIoErrTruncate),
			"ErrIoErrUnlock":            reflect.ValueOf(&q.ErrIoErrUnlock),
			"ErrIoErrWrite":             reflect.ValueOf(&q.ErrIoErrWrite),
			"ErrLocked":                 reflect.ValueOf(&q.ErrLocked),
			"ErrLockedSharedCache":      reflect.ValueOf(&q.ErrLockedSharedCache),
			"ErrMismatch":               reflect.ValueOf(&q.ErrMismatch),
			"ErrMisuse":                 reflect.ValueOf(&q.ErrMisuse),
			"ErrNoLFS":                  reflect.ValueOf(&q.ErrNoLFS),
			"ErrNomem":                  reflect.ValueOf(&q.ErrNomem),
			"ErrNotADB":                 reflect.ValueOf(&q.ErrNotADB),
			"ErrNotFound":               reflect.ValueOf(&q.ErrNotFound),
			"ErrNotice":                 reflect.ValueOf(&q.ErrNotice),
			"ErrNoticeRecoverRollback":  reflect.ValueOf(&q.ErrNoticeRecoverRollback),
			"ErrNoticeRecoverWAL":       reflect.ValueOf(&q.ErrNoticeRecoverWAL),
			"ErrPerm":                   reflect.ValueOf(&q.ErrPerm),
			"ErrProtocol":               reflect.ValueOf(&q.ErrProtocol),
			"ErrRange":                  reflect.ValueOf(&q.ErrRange),
			"ErrReadonly":               reflect.ValueOf(&q.ErrReadonly),
			"ErrReadonlyCantLock":       reflect.ValueOf(&q.ErrReadonlyCantLock),
			"ErrReadonlyDbMoved":        reflect.ValueOf(&q.ErrReadonlyDbMoved),
			"ErrReadonlyRecovery":       reflect.ValueOf(&q.ErrReadonlyRecovery),
			"ErrReadonlyRollback":       reflect.ValueOf(&q.ErrReadonlyRollback),
			"ErrSchema":                 reflect.ValueOf(&q.ErrSchema),
			"ErrTooBig":                 reflect.ValueOf(&q.ErrTooBig),
			"ErrWarning":                reflect.ValueOf(&q.ErrWarning),
			"ErrWarningAutoIndex":       reflect.ValueOf(&q.ErrWarningAutoIndex),
			"SQLiteTimestampFormats":    reflect.ValueOf(&q.SQLiteTimestampFormats),
		},
		Funcs: map[string]reflect.Value{
			"CryptEncoderSHA1":    reflect.ValueOf(q.CryptEncoderSHA1),
			"CryptEncoderSHA256":  reflect.ValueOf(q.CryptEncoderSHA256),
			"CryptEncoderSHA384":  reflect.ValueOf(q.CryptEncoderSHA384),
			"CryptEncoderSHA512":  reflect.ValueOf(q.CryptEncoderSHA512),
			"CryptEncoderSSHA1":   reflect.ValueOf(q.CryptEncoderSSHA1),
			"CryptEncoderSSHA256": reflect.ValueOf(q.CryptEncoderSSHA256),
			"CryptEncoderSSHA384": reflect.ValueOf(q.CryptEncoderSSHA384),
			"CryptEncoderSSHA512": reflect.ValueOf(q.CryptEncoderSSHA512),
			"Version":             reflect.ValueOf(q.Version),
		},
		TypedConsts: map[string]gossa.TypedConst{
			"ErrNoMask":                          {reflect.TypeOf(q.ErrNoMask), constant.MakeInt64(int64(q.ErrNoMask))},
			"SQLITE_FCNTL_BEGIN_ATOMIC_WRITE":    {reflect.TypeOf(q.SQLITE_FCNTL_BEGIN_ATOMIC_WRITE), constant.MakeInt64(int64(q.SQLITE_FCNTL_BEGIN_ATOMIC_WRITE))},
			"SQLITE_FCNTL_BUSYHANDLER":           {reflect.TypeOf(q.SQLITE_FCNTL_BUSYHANDLER), constant.MakeInt64(int64(q.SQLITE_FCNTL_BUSYHANDLER))},
			"SQLITE_FCNTL_CHUNK_SIZE":            {reflect.TypeOf(q.SQLITE_FCNTL_CHUNK_SIZE), constant.MakeInt64(int64(q.SQLITE_FCNTL_CHUNK_SIZE))},
			"SQLITE_FCNTL_CKPT_DONE":             {reflect.TypeOf(q.SQLITE_FCNTL_CKPT_DONE), constant.MakeInt64(int64(q.SQLITE_FCNTL_CKPT_DONE))},
			"SQLITE_FCNTL_CKPT_START":            {reflect.TypeOf(q.SQLITE_FCNTL_CKPT_START), constant.MakeInt64(int64(q.SQLITE_FCNTL_CKPT_START))},
			"SQLITE_FCNTL_CKSM_FILE":             {reflect.TypeOf(q.SQLITE_FCNTL_CKSM_FILE), constant.MakeInt64(int64(q.SQLITE_FCNTL_CKSM_FILE))},
			"SQLITE_FCNTL_COMMIT_ATOMIC_WRITE":   {reflect.TypeOf(q.SQLITE_FCNTL_COMMIT_ATOMIC_WRITE), constant.MakeInt64(int64(q.SQLITE_FCNTL_COMMIT_ATOMIC_WRITE))},
			"SQLITE_FCNTL_COMMIT_PHASETWO":       {reflect.TypeOf(q.SQLITE_FCNTL_COMMIT_PHASETWO), constant.MakeInt64(int64(q.SQLITE_FCNTL_COMMIT_PHASETWO))},
			"SQLITE_FCNTL_DATA_VERSION":          {reflect.TypeOf(q.SQLITE_FCNTL_DATA_VERSION), constant.MakeInt64(int64(q.SQLITE_FCNTL_DATA_VERSION))},
			"SQLITE_FCNTL_EXTERNAL_READER":       {reflect.TypeOf(q.SQLITE_FCNTL_EXTERNAL_READER), constant.MakeInt64(int64(q.SQLITE_FCNTL_EXTERNAL_READER))},
			"SQLITE_FCNTL_FILE_POINTER":          {reflect.TypeOf(q.SQLITE_FCNTL_FILE_POINTER), constant.MakeInt64(int64(q.SQLITE_FCNTL_FILE_POINTER))},
			"SQLITE_FCNTL_GET_LOCKPROXYFILE":     {reflect.TypeOf(q.SQLITE_FCNTL_GET_LOCKPROXYFILE), constant.MakeInt64(int64(q.SQLITE_FCNTL_GET_LOCKPROXYFILE))},
			"SQLITE_FCNTL_HAS_MOVED":             {reflect.TypeOf(q.SQLITE_FCNTL_HAS_MOVED), constant.MakeInt64(int64(q.SQLITE_FCNTL_HAS_MOVED))},
			"SQLITE_FCNTL_JOURNAL_POINTER":       {reflect.TypeOf(q.SQLITE_FCNTL_JOURNAL_POINTER), constant.MakeInt64(int64(q.SQLITE_FCNTL_JOURNAL_POINTER))},
			"SQLITE_FCNTL_LAST_ERRNO":            {reflect.TypeOf(q.SQLITE_FCNTL_LAST_ERRNO), constant.MakeInt64(int64(q.SQLITE_FCNTL_LAST_ERRNO))},
			"SQLITE_FCNTL_LOCKSTATE":             {reflect.TypeOf(q.SQLITE_FCNTL_LOCKSTATE), constant.MakeInt64(int64(q.SQLITE_FCNTL_LOCKSTATE))},
			"SQLITE_FCNTL_LOCK_TIMEOUT":          {reflect.TypeOf(q.SQLITE_FCNTL_LOCK_TIMEOUT), constant.MakeInt64(int64(q.SQLITE_FCNTL_LOCK_TIMEOUT))},
			"SQLITE_FCNTL_MMAP_SIZE":             {reflect.TypeOf(q.SQLITE_FCNTL_MMAP_SIZE), constant.MakeInt64(int64(q.SQLITE_FCNTL_MMAP_SIZE))},
			"SQLITE_FCNTL_OVERWRITE":             {reflect.TypeOf(q.SQLITE_FCNTL_OVERWRITE), constant.MakeInt64(int64(q.SQLITE_FCNTL_OVERWRITE))},
			"SQLITE_FCNTL_PDB":                   {reflect.TypeOf(q.SQLITE_FCNTL_PDB), constant.MakeInt64(int64(q.SQLITE_FCNTL_PDB))},
			"SQLITE_FCNTL_PERSIST_WAL":           {reflect.TypeOf(q.SQLITE_FCNTL_PERSIST_WAL), constant.MakeInt64(int64(q.SQLITE_FCNTL_PERSIST_WAL))},
			"SQLITE_FCNTL_POWERSAFE_OVERWRITE":   {reflect.TypeOf(q.SQLITE_FCNTL_POWERSAFE_OVERWRITE), constant.MakeInt64(int64(q.SQLITE_FCNTL_POWERSAFE_OVERWRITE))},
			"SQLITE_FCNTL_PRAGMA":                {reflect.TypeOf(q.SQLITE_FCNTL_PRAGMA), constant.MakeInt64(int64(q.SQLITE_FCNTL_PRAGMA))},
			"SQLITE_FCNTL_RBU":                   {reflect.TypeOf(q.SQLITE_FCNTL_RBU), constant.MakeInt64(int64(q.SQLITE_FCNTL_RBU))},
			"SQLITE_FCNTL_RESERVE_BYTES":         {reflect.TypeOf(q.SQLITE_FCNTL_RESERVE_BYTES), constant.MakeInt64(int64(q.SQLITE_FCNTL_RESERVE_BYTES))},
			"SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE": {reflect.TypeOf(q.SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE), constant.MakeInt64(int64(q.SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE))},
			"SQLITE_FCNTL_SET_LOCKPROXYFILE":     {reflect.TypeOf(q.SQLITE_FCNTL_SET_LOCKPROXYFILE), constant.MakeInt64(int64(q.SQLITE_FCNTL_SET_LOCKPROXYFILE))},
			"SQLITE_FCNTL_SIZE_HINT":             {reflect.TypeOf(q.SQLITE_FCNTL_SIZE_HINT), constant.MakeInt64(int64(q.SQLITE_FCNTL_SIZE_HINT))},
			"SQLITE_FCNTL_SIZE_LIMIT":            {reflect.TypeOf(q.SQLITE_FCNTL_SIZE_LIMIT), constant.MakeInt64(int64(q.SQLITE_FCNTL_SIZE_LIMIT))},
			"SQLITE_FCNTL_SYNC":                  {reflect.TypeOf(q.SQLITE_FCNTL_SYNC), constant.MakeInt64(int64(q.SQLITE_FCNTL_SYNC))},
			"SQLITE_FCNTL_SYNC_OMITTED":          {reflect.TypeOf(q.SQLITE_FCNTL_SYNC_OMITTED), constant.MakeInt64(int64(q.SQLITE_FCNTL_SYNC_OMITTED))},
			"SQLITE_FCNTL_TEMPFILENAME":          {reflect.TypeOf(q.SQLITE_FCNTL_TEMPFILENAME), constant.MakeInt64(int64(q.SQLITE_FCNTL_TEMPFILENAME))},
			"SQLITE_FCNTL_TRACE":                 {reflect.TypeOf(q.SQLITE_FCNTL_TRACE), constant.MakeInt64(int64(q.SQLITE_FCNTL_TRACE))},
			"SQLITE_FCNTL_VFSNAME":               {reflect.TypeOf(q.SQLITE_FCNTL_VFSNAME), constant.MakeInt64(int64(q.SQLITE_FCNTL_VFSNAME))},
			"SQLITE_FCNTL_VFS_POINTER":           {reflect.TypeOf(q.SQLITE_FCNTL_VFS_POINTER), constant.MakeInt64(int64(q.SQLITE_FCNTL_VFS_POINTER))},
			"SQLITE_FCNTL_WAL_BLOCK":             {reflect.TypeOf(q.SQLITE_FCNTL_WAL_BLOCK), constant.MakeInt64(int64(q.SQLITE_FCNTL_WAL_BLOCK))},
			"SQLITE_FCNTL_WIN32_AV_RETRY":        {reflect.TypeOf(q.SQLITE_FCNTL_WIN32_AV_RETRY), constant.MakeInt64(int64(q.SQLITE_FCNTL_WIN32_AV_RETRY))},
			"SQLITE_FCNTL_WIN32_GET_HANDLE":      {reflect.TypeOf(q.SQLITE_FCNTL_WIN32_GET_HANDLE), constant.MakeInt64(int64(q.SQLITE_FCNTL_WIN32_GET_HANDLE))},
			"SQLITE_FCNTL_WIN32_SET_HANDLE":      {reflect.TypeOf(q.SQLITE_FCNTL_WIN32_SET_HANDLE), constant.MakeInt64(int64(q.SQLITE_FCNTL_WIN32_SET_HANDLE))},
			"SQLITE_FCNTL_ZIPVFS":                {reflect.TypeOf(q.SQLITE_FCNTL_ZIPVFS), constant.MakeInt64(int64(q.SQLITE_FCNTL_ZIPVFS))},
		},
		UntypedConsts: map[string]gossa.UntypedConst{
			"SQLITE_ALTER_TABLE":               {"untyped int", constant.MakeInt64(int64(q.SQLITE_ALTER_TABLE))},
			"SQLITE_ANALYZE":                   {"untyped int", constant.MakeInt64(int64(q.SQLITE_ANALYZE))},
			"SQLITE_ATTACH":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_ATTACH))},
			"SQLITE_BLOB":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_BLOB))},
			"SQLITE_BOOL":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_BOOL))},
			"SQLITE_COPY":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_COPY))},
			"SQLITE_CREATE_INDEX":              {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_INDEX))},
			"SQLITE_CREATE_TABLE":              {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_TABLE))},
			"SQLITE_CREATE_TEMP_INDEX":         {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_TEMP_INDEX))},
			"SQLITE_CREATE_TEMP_TABLE":         {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_TEMP_TABLE))},
			"SQLITE_CREATE_TEMP_TRIGGER":       {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_TEMP_TRIGGER))},
			"SQLITE_CREATE_TEMP_VIEW":          {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_TEMP_VIEW))},
			"SQLITE_CREATE_TRIGGER":            {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_TRIGGER))},
			"SQLITE_CREATE_VIEW":               {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_VIEW))},
			"SQLITE_CREATE_VTABLE":             {"untyped int", constant.MakeInt64(int64(q.SQLITE_CREATE_VTABLE))},
			"SQLITE_DELETE":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_DELETE))},
			"SQLITE_DENY":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_DENY))},
			"SQLITE_DETACH":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_DETACH))},
			"SQLITE_DROP_INDEX":                {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_INDEX))},
			"SQLITE_DROP_TABLE":                {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_TABLE))},
			"SQLITE_DROP_TEMP_INDEX":           {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_TEMP_INDEX))},
			"SQLITE_DROP_TEMP_TABLE":           {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_TEMP_TABLE))},
			"SQLITE_DROP_TEMP_TRIGGER":         {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_TEMP_TRIGGER))},
			"SQLITE_DROP_TEMP_VIEW":            {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_TEMP_VIEW))},
			"SQLITE_DROP_TRIGGER":              {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_TRIGGER))},
			"SQLITE_DROP_VIEW":                 {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_VIEW))},
			"SQLITE_DROP_VTABLE":               {"untyped int", constant.MakeInt64(int64(q.SQLITE_DROP_VTABLE))},
			"SQLITE_FUNCTION":                  {"untyped int", constant.MakeInt64(int64(q.SQLITE_FUNCTION))},
			"SQLITE_IGNORE":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_IGNORE))},
			"SQLITE_INSERT":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_INSERT))},
			"SQLITE_INTEGER":                   {"untyped int", constant.MakeInt64(int64(q.SQLITE_INTEGER))},
			"SQLITE_LIMIT_ATTACHED":            {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_ATTACHED))},
			"SQLITE_LIMIT_COLUMN":              {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_COLUMN))},
			"SQLITE_LIMIT_COMPOUND_SELECT":     {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_COMPOUND_SELECT))},
			"SQLITE_LIMIT_EXPR_DEPTH":          {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_EXPR_DEPTH))},
			"SQLITE_LIMIT_FUNCTION_ARG":        {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_FUNCTION_ARG))},
			"SQLITE_LIMIT_LENGTH":              {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_LENGTH))},
			"SQLITE_LIMIT_LIKE_PATTERN_LENGTH": {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_LIKE_PATTERN_LENGTH))},
			"SQLITE_LIMIT_SQL_LENGTH":          {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_SQL_LENGTH))},
			"SQLITE_LIMIT_TRIGGER_DEPTH":       {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_TRIGGER_DEPTH))},
			"SQLITE_LIMIT_VARIABLE_NUMBER":     {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_VARIABLE_NUMBER))},
			"SQLITE_LIMIT_VDBE_OP":             {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_VDBE_OP))},
			"SQLITE_LIMIT_WORKER_THREADS":      {"untyped int", constant.MakeInt64(int64(q.SQLITE_LIMIT_WORKER_THREADS))},
			"SQLITE_NULL":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_NULL))},
			"SQLITE_NUMERIC":                   {"untyped int", constant.MakeInt64(int64(q.SQLITE_NUMERIC))},
			"SQLITE_OK":                        {"untyped int", constant.MakeInt64(int64(q.SQLITE_OK))},
			"SQLITE_PRAGMA":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_PRAGMA))},
			"SQLITE_READ":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_READ))},
			"SQLITE_REAL":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_REAL))},
			"SQLITE_REINDEX":                   {"untyped int", constant.MakeInt64(int64(q.SQLITE_REINDEX))},
			"SQLITE_SAVEPOINT":                 {"untyped int", constant.MakeInt64(int64(q.SQLITE_SAVEPOINT))},
			"SQLITE_SELECT":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_SELECT))},
			"SQLITE_TEXT":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_TEXT))},
			"SQLITE_TIME":                      {"untyped int", constant.MakeInt64(int64(q.SQLITE_TIME))},
			"SQLITE_TRANSACTION":               {"untyped int", constant.MakeInt64(int64(q.SQLITE_TRANSACTION))},
			"SQLITE_UPDATE":                    {"untyped int", constant.MakeInt64(int64(q.SQLITE_UPDATE))},
		},
	})
}
