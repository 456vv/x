// Code generated by 'yaegi extract github.com/456vv/vweb/v2/builtin'. DO NOT EDIT.

//go:build yaegi_lib
// +build yaegi_lib

package yaegi_lib

import (
	"github.com/456vv/vweb/v2/builtin"
	"reflect"
)

func init() {
	Symbols["github.com/456vv/vweb/v2/builtin/builtin"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Add":        reflect.ValueOf(builtin.Add),
		"And":        reflect.ValueOf(builtin.And),
		"Append":     reflect.ValueOf(builtin.Append),
		"BitAnd":     reflect.ValueOf(builtin.BitAnd),
		"BitAndNot":  reflect.ValueOf(builtin.BitAndNot),
		"BitLshr":    reflect.ValueOf(builtin.BitLshr),
		"BitNot":     reflect.ValueOf(builtin.BitNot),
		"BitOr":      reflect.ValueOf(builtin.BitOr),
		"BitRshr":    reflect.ValueOf(builtin.BitRshr),
		"BitXor":     reflect.ValueOf(builtin.BitXor),
		"Bool":       reflect.ValueOf(builtin.Bool),
		"Byte":       reflect.ValueOf(builtin.Byte),
		"Bytes":      reflect.ValueOf(builtin.Bytes),
		"Cap":        reflect.ValueOf(builtin.Cap),
		"ChanOf":     reflect.ValueOf(builtin.ChanOf),
		"Close":      reflect.ValueOf(builtin.Close),
		"Complex128": reflect.ValueOf(builtin.Complex128),
		"Complex64":  reflect.ValueOf(builtin.Complex64),
		"Compute":    reflect.ValueOf(builtin.Compute),
		"Convert":    reflect.ValueOf(builtin.Convert),
		"Copy":       reflect.ValueOf(builtin.Copy),
		"Dec":        reflect.ValueOf(builtin.Dec),
		"Delete":     reflect.ValueOf(builtin.Delete),
		"EQ":         reflect.ValueOf(builtin.EQ),
		"Float32":    reflect.ValueOf(builtin.Float32),
		"Float64":    reflect.ValueOf(builtin.Float64),
		"GE":         reflect.ValueOf(builtin.GE),
		"GT":         reflect.ValueOf(builtin.GT),
		"Get":        reflect.ValueOf(builtin.Get),
		"GetSlice":   reflect.ValueOf(builtin.GetSlice),
		"GetSlice3":  reflect.ValueOf(builtin.GetSlice3),
		"Inc":        reflect.ValueOf(builtin.Inc),
		"Init":       reflect.ValueOf(builtin.Init),
		"Int":        reflect.ValueOf(builtin.Int),
		"Int16":      reflect.ValueOf(builtin.Int16),
		"Int32":      reflect.ValueOf(builtin.Int32),
		"Int64":      reflect.ValueOf(builtin.Int64),
		"Int8":       reflect.ValueOf(builtin.Int8),
		"LE":         reflect.ValueOf(builtin.LE),
		"LT":         reflect.ValueOf(builtin.LT),
		"Len":        reflect.ValueOf(builtin.Len),
		"Make":       reflect.ValueOf(builtin.Make),
		"MakeChan":   reflect.ValueOf(builtin.MakeChan),
		"MapFrom":    reflect.ValueOf(builtin.MapFrom),
		"Max":        reflect.ValueOf(builtin.Max),
		"Min":        reflect.ValueOf(builtin.Min),
		"Mod":        reflect.ValueOf(builtin.Mod),
		"Mul":        reflect.ValueOf(builtin.Mul),
		"NE":         reflect.ValueOf(builtin.NE),
		"Neg":        reflect.ValueOf(builtin.Neg),
		"Not":        reflect.ValueOf(builtin.Not),
		"Or":         reflect.ValueOf(builtin.Or),
		"Panic":      reflect.ValueOf(builtin.Panic),
		"Pointer":    reflect.ValueOf(builtin.Pointer),
		"Quo":        reflect.ValueOf(builtin.Quo),
		"Recv":       reflect.ValueOf(builtin.Recv),
		"Rune":       reflect.ValueOf(builtin.Rune),
		"Runs":       reflect.ValueOf(builtin.Runs),
		"Send":       reflect.ValueOf(builtin.Send),
		"Set":        reflect.ValueOf(builtin.Set),
		"SliceFrom":  reflect.ValueOf(builtin.SliceFrom),
		"String":     reflect.ValueOf(builtin.String),
		"Sub":        reflect.ValueOf(builtin.Sub),
		"TryRecv":    reflect.ValueOf(builtin.TryRecv),
		"TrySend":    reflect.ValueOf(builtin.TrySend),
		"Type":       reflect.ValueOf(builtin.Type),
		"Uint":       reflect.ValueOf(builtin.Uint),
		"Uint16":     reflect.ValueOf(builtin.Uint16),
		"Uint32":     reflect.ValueOf(builtin.Uint32),
		"Uint64":     reflect.ValueOf(builtin.Uint64),
		"Uint8":      reflect.ValueOf(builtin.Uint8),
		"Uintptr":    reflect.ValueOf(builtin.Uintptr),
		"Value":      reflect.ValueOf(builtin.Value),

		// type definitions
		"Chan": reflect.ValueOf((*builtin.Chan)(nil)),
	}
}
