// Code generated by 'yaegi extract golang.org/x/crypto/acme/autocert'. DO NOT EDIT.

//go:build yaegi_lib
// +build yaegi_lib

package yaegi_lib

import (
	"context"
	"go/constant"
	"go/token"
	"golang.org/x/crypto/acme/autocert"
	"reflect"
)

func init() {
	Symbols["golang.org/x/crypto/acme/autocert/autocert"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AcceptTOS":            reflect.ValueOf(autocert.AcceptTOS),
		"DefaultACMEDirectory": reflect.ValueOf(constant.MakeFromLiteral("\"https://acme-v02.api.letsencrypt.org/directory\"", token.STRING, 0)),
		"ErrCacheMiss":         reflect.ValueOf(&autocert.ErrCacheMiss).Elem(),
		"HostWhitelist":        reflect.ValueOf(autocert.HostWhitelist),
		"NewListener":          reflect.ValueOf(autocert.NewListener),

		// type definitions
		"Cache":      reflect.ValueOf((*autocert.Cache)(nil)),
		"DirCache":   reflect.ValueOf((*autocert.DirCache)(nil)),
		"HostPolicy": reflect.ValueOf((*autocert.HostPolicy)(nil)),
		"Manager":    reflect.ValueOf((*autocert.Manager)(nil)),

		// interface wrapper definitions
		"_Cache": reflect.ValueOf((*_golang_org_x_crypto_acme_autocert_Cache)(nil)),
	}
}

// _golang_org_x_crypto_acme_autocert_Cache is an interface wrapper for Cache type
type _golang_org_x_crypto_acme_autocert_Cache struct {
	IValue  interface{}
	WDelete func(ctx context.Context, key string) error
	WGet    func(ctx context.Context, key string) ([]byte, error)
	WPut    func(ctx context.Context, key string, data []byte) error
}

func (W _golang_org_x_crypto_acme_autocert_Cache) Delete(ctx context.Context, key string) error {
	return W.WDelete(ctx, key)
}
func (W _golang_org_x_crypto_acme_autocert_Cache) Get(ctx context.Context, key string) ([]byte, error) {
	return W.WGet(ctx, key)
}
func (W _golang_org_x_crypto_acme_autocert_Cache) Put(ctx context.Context, key string, data []byte) error {
	return W.WPut(ctx, key, data)
}
