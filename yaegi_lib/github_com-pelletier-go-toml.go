// Code generated by 'yaegi extract github.com/pelletier/go-toml'. DO NOT EDIT.

package yaegi_lib

import (
	"github.com/pelletier/go-toml"
	"reflect"
)

func init() {
	Symbols["github.com/pelletier/go-toml/toml"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Load":                      reflect.ValueOf(toml.Load),
		"LoadBytes":                 reflect.ValueOf(toml.LoadBytes),
		"LoadFile":                  reflect.ValueOf(toml.LoadFile),
		"LoadReader":                reflect.ValueOf(toml.LoadReader),
		"LocalDateOf":               reflect.ValueOf(toml.LocalDateOf),
		"LocalDateTimeOf":           reflect.ValueOf(toml.LocalDateTimeOf),
		"LocalTimeOf":               reflect.ValueOf(toml.LocalTimeOf),
		"Marshal":                   reflect.ValueOf(toml.Marshal),
		"NewDecoder":                reflect.ValueOf(toml.NewDecoder),
		"NewEncoder":                reflect.ValueOf(toml.NewEncoder),
		"OrderAlphabetical":         reflect.ValueOf(toml.OrderAlphabetical),
		"OrderPreserve":             reflect.ValueOf(toml.OrderPreserve),
		"ParseLocalDate":            reflect.ValueOf(toml.ParseLocalDate),
		"ParseLocalDateTime":        reflect.ValueOf(toml.ParseLocalDateTime),
		"ParseLocalTime":            reflect.ValueOf(toml.ParseLocalTime),
		"TreeFromMap":               reflect.ValueOf(toml.TreeFromMap),
		"Unmarshal":                 reflect.ValueOf(toml.Unmarshal),
		"ValueStringRepresentation": reflect.ValueOf(toml.ValueStringRepresentation),

		// type definitions
		"Decoder":       reflect.ValueOf((*toml.Decoder)(nil)),
		"Encoder":       reflect.ValueOf((*toml.Encoder)(nil)),
		"LocalDate":     reflect.ValueOf((*toml.LocalDate)(nil)),
		"LocalDateTime": reflect.ValueOf((*toml.LocalDateTime)(nil)),
		"LocalTime":     reflect.ValueOf((*toml.LocalTime)(nil)),
		"MarshalOrder":  reflect.ValueOf((*toml.MarshalOrder)(nil)),
		"Marshaler":     reflect.ValueOf((*toml.Marshaler)(nil)),
		"Position":      reflect.ValueOf((*toml.Position)(nil)),
		"PubTOMLValue":  reflect.ValueOf((*toml.PubTOMLValue)(nil)),
		"PubTree":       reflect.ValueOf((*toml.PubTree)(nil)),
		"SetOptions":    reflect.ValueOf((*toml.SetOptions)(nil)),
		"Tree":          reflect.ValueOf((*toml.Tree)(nil)),
		"Unmarshaler":   reflect.ValueOf((*toml.Unmarshaler)(nil)),

		// interface wrapper definitions
		"_Marshaler":   reflect.ValueOf((*_github_com_pelletier_go_toml_Marshaler)(nil)),
		"_Unmarshaler": reflect.ValueOf((*_github_com_pelletier_go_toml_Unmarshaler)(nil)),
	}
}

// _github_com_pelletier_go_toml_Marshaler is an interface wrapper for Marshaler type
type _github_com_pelletier_go_toml_Marshaler struct {
	IValue       interface{}
	WMarshalTOML func() ([]byte, error)
}

func (W _github_com_pelletier_go_toml_Marshaler) MarshalTOML() ([]byte, error) {
	return W.WMarshalTOML()
}

// _github_com_pelletier_go_toml_Unmarshaler is an interface wrapper for Unmarshaler type
type _github_com_pelletier_go_toml_Unmarshaler struct {
	IValue         interface{}
	WUnmarshalTOML func(a0 interface{}) error
}

func (W _github_com_pelletier_go_toml_Unmarshaler) UnmarshalTOML(a0 interface{}) error {
	return W.WUnmarshalTOML(a0)
}
